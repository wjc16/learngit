GPIO
	GPIO_InitTypeDef GPIO_INT;构造结构体
	RCC_AHB1PeriphClockCmd(CLK,ENABLE); 开启时钟
	GPIO_INT.GPIO_Pin=PIN; 设置引脚
	GPIO_INT.GPIO_Mode=GPIO_Mode_OUT; 输出、输入
	GPIO_INT.GPIO_OType=GPIO_OType_PP; 输出模式（推挽）
	GPIO_INT.GPIO_PuPd=GPIO_PuPd_UP; 上拉、下拉、悬空
	GPIO_INT.GPIO_Speed=GPIO_Speed_2MHz; 引脚速度
	GPIO_Init（PORT,&STRUCT） 库函数初始化GPIO
	
	宏定义举例：
	#define LED3_GPIO_PORT GPIOH
	#define LED3_GPIO_PIN GPIO_Pin_12
	#define LED3_GPIO_CLK RCC_AHB1Periph_GPIOH
	
NVIC
	void NVIC_Configuartion(void)
{
	NVIC_InitTypeDef NVIC_INT;
	//构造结构体
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1); 
	//优先级组
	NVIC_INT.NVIC_IRQChannel=*_EXTI_IRQ;
	//中断源
	NVIC_INT.NVIC_IRQChannelPreemptionPriority=1;
	//抢占优先级
	NVIC_INT.NVIC_IRQChannelSubPriority=1;
	//子优先级
	NVIC_INT.NVIC_IRQChannelCmd=ENABLE;
	//使能中断
	NVIC_Init(&NVIC_INT);
	//构造
}

	宏定义举例：#define KEY1_INT_EXTI_IRQ EXTI0_IRQn

EXTI
void EXTI_Configuration()
{
	EXTI_InitTypeDef EXTI_INT;
	//构造结构体
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
	//打开时钟，使用GPIO外部中断时必须使能SYSCFG时钟
	NVIC_Configuartion();
	//配置NVIC
	SYSCFG_EXTILineConfig(*_EXTI_PORTSOURCE,*_EXTI_PINSOURCE);
	//连接EXTI中断源到引脚
	EXTI_INT.EXTI_Line=KEY1_INT_EXTI_LINE;
	//配置中断源
	EXTI_INT.EXTI_Mode=EXTI_Mode_Interrupt;
	//配置中断模式（中断、事件）
	EXTI_INT.EXTI_Trigger=EXTI_Trigger_Rising;
	//触发模式（EXTI_Trigger_rising，EXTI_Trigger_falling，EXTI_Trigger_Rising_Falling）
	EXTI_INT.EXTI_LineCmd=ENABLE;
	//使能中断
	EXTI_Init(&EXTI_INT);
	//配置中断
}
	宏定义举例：
	#define KEY1_INT_EXTI_PORTSOURCE EXTI_PortSourceGPIOA
	#define KEY1_INT_EXTI_PINSOURCE EXTI_PinSource0
	#define KEY1_INT_EXTI_LINE EXTI_Line0
	#define KEY1_INT_EXTI_IRQ EXTI0_IRQn
	#define KEY1_IRQHandler EXTI0_IRQHandler 
	*irqn的通道需要与irqhandler的处理函数相同
	
SYSTICK
	初始化函数：
	void Systick_Ini()
	{
		SysTick_Config(SystemCoreClock/100000);
	}	
	SystemCoreClock是库函数，用于配置tick，参数为tick的计数值
	常用：SystemCoreClock/1000（1ms），SystemCoreClock/100000（10us），SystemCoreClock/1000000（1us）
	服务函数：
	void SysTick_Handler(void)
	stm32xxxxx_it.h库函数
	基本用法:
	声明一个全局变量用于记录滴答的数量
	
	
